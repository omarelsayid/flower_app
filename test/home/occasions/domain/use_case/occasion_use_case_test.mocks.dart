// Mocks generated by Mockito 5.4.5 from annotations
// in flower_app/test/home/occasions/domain/use_case/occasion_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flower_app/core/common/result.dart' as _i4;
import 'package:flower_app/home/occasions/domain/entity/occasions_entity.dart'
    as _i5;
import 'package:flower_app/home/occasions/domain/entity/products_response_entity.dart'
    as _i7;
import 'package:flower_app/home/occasions/domain/repository/occasion_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [OccasionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockOccasionRepository extends _i1.Mock
    implements _i2.OccasionRepository {
  MockOccasionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<_i5.OccasionsResponseEntity>> getOccasion() =>
      (super.noSuchMethod(
            Invocation.method(#getOccasion, []),
            returnValue:
                _i3.Future<_i4.Result<_i5.OccasionsResponseEntity>>.value(
                  _i6.dummyValue<_i4.Result<_i5.OccasionsResponseEntity>>(
                    this,
                    Invocation.method(#getOccasion, []),
                  ),
                ),
          )
          as _i3.Future<_i4.Result<_i5.OccasionsResponseEntity>>);

  @override
  _i3.Future<_i4.Result<_i7.ProductsResponseEntity>> getSpecificOccasion(
    String? occasionId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getSpecificOccasion, [occasionId]),
            returnValue:
                _i3.Future<_i4.Result<_i7.ProductsResponseEntity>>.value(
                  _i6.dummyValue<_i4.Result<_i7.ProductsResponseEntity>>(
                    this,
                    Invocation.method(#getSpecificOccasion, [occasionId]),
                  ),
                ),
          )
          as _i3.Future<_i4.Result<_i7.ProductsResponseEntity>>);
}
